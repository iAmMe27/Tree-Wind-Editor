using Mutagen.Bethesda;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.WPF.Reflection.Attributes;

namespace TreeWindEditor
{
    public class Settings
    {
        [SettingName("Trunk Flexibility")]
        [Tooltip("Trunk Flexibility Multiplier")]
        public float TrunkFlexibilityMult = 1.0f;

        [SettingName("Branch Flexibility")]
        [Tooltip("Branch Flexibility Multiplier")]
        public float BranchFlexibilityMult = 1.0f;


        // xEdit v4.1.4c has these records decoded but Mutagen currently does not 
        /*[SettingName("Trunk Amplitude")]
        [Tooltip("Trunk Amplitude Multiplier")]
        public float TrunkAmplitudeMult = 1.0f;

        [SettingName("Front Amplitude")]
        [Tooltip("Front Amplitude Multiplier")]
        public float FrontAmplitudeMult = 1.0f;

        [SettingName("Back Amplitude")]
        [Tooltip("Back Amplitude Multiplier")]
        public float BackAmplitudeMult = 1.0f;

        [SettingName("Side Amplitude")]
        [Tooltip("Side Amplitude Multiplier")]
        public float SideAmplitudeMult = 1.0f;

        [SettingName("Front Frequency")]
        [Tooltip("Front Frequency Multiplier")]
        public float FrontFrequencyMult = 1.0f;

        [SettingName("Back Frequency")]
        [Tooltip("Back Frequency Multiplier")]
        public float BackFrequencyMult = 1.0f;

        [SettingName("Side Frequency")]
        [Tooltip("Side Frequency Multiplier")]
        public float SideFrequencyMult = 1.0f;
        
        [SettingName("Leaf Flexibility")]
        [Tooltip("Leaf Flexibility Multiplier")]
        public float LeafFlexibilityMult = 1.0f;*/

        [SettingName("Leaf Amplitude")]
        [Tooltip("Leaf Amplitude Multiplier")]
        public float LeafAmplitudeMult = 1.0f;

        [SettingName("Leaf Frequency")]
        [Tooltip("Leaf Frequency Multiplier")]
        public float LeafFrequencyMult = 1.0f;

        [SettingName("Blacklist")]
        [Tooltip("Enter Editor ID's for Trees you want to skip")]
        public List<string> Blacklist = new();        
    }

    public class Program
    {
        private static Lazy<Settings> _settings = null!;

        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetAutogeneratedSettings("settings", "settings.json", out _settings)
                .SetTypicalOpen(GameRelease.SkyrimSE, "TreeWindEditor.esp")
                .Run(args);
        }

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            // Start with making sure we don't try to multiply by 0
            if (_settings.Value.TrunkFlexibilityMult == 0.0f) _settings.Value.TrunkFlexibilityMult = 1.0f;
            if (_settings.Value.BranchFlexibilityMult == 0.0f) _settings.Value.BranchFlexibilityMult = 1.0f;
            if (_settings.Value.LeafAmplitudeMult == 0.0f) _settings.Value.LeafAmplitudeMult = 1.0f;
            if (_settings.Value.LeafFrequencyMult == 0.0f) _settings.Value.LeafFrequencyMult = 1.0f;

            // All tree records
            foreach (var tree in state.LoadOrder.PriorityOrder.Tree().WinningContextOverrides())
            {
                // Check for anything on the blacklist
                if (_settings.Value.Blacklist.Count > 0)
                {
                    if (tree.Record.EditorID != null)
                    {
                        if (_settings.Value.Blacklist.Contains(tree.Record.EditorID))
                        {
                            continue;
                        }
                    }
                }

                // Make sure the existing records are not 0 already
                if (tree.Record.TrunkFlexibility == 0.0f) continue;
                if (tree.Record.BranchFlexibility == 0.0f) continue;
                if (tree.Record.LeafAmplitude == 0.0f) continue;
                if (tree.Record.LeafFrequency == 0.0f) continue;

                var patchedTree = state.PatchMod.Trees.GetOrAddAsOverride(tree.Record);

                // Trunk Flexibility
                patchedTree.TrunkFlexibility *= _settings.Value.TrunkFlexibilityMult;

                // Make sure we haven't gone too low if the multiplier is > 1 and if it is, remove it
                if (Math.Abs(patchedTree.TrunkFlexibility - tree.Record.TrunkFlexibility) < 0.001f)
                {
                    state.PatchMod.Remove(patchedTree);
                }

                // Branch Flexibility
                patchedTree.BranchFlexibility *= _settings.Value.BranchFlexibilityMult;

                // Make sure we haven't gone too low if the multiplier is > 1 and if it is, remove it
                if (Math.Abs(patchedTree.BranchFlexibility - tree.Record.BranchFlexibility) < 0.001f)
                {
                    state.PatchMod.Remove(patchedTree);
                }

                // Leaf Amplitude
                patchedTree.LeafAmplitude *= _settings.Value.LeafAmplitudeMult;

                // Make sure we haven't gone too low if the multiplier is > 1 and if it is, remove it
                if (Math.Abs(patchedTree.LeafAmplitude - tree.Record.LeafAmplitude) < 0.001f)
                {
                    state.PatchMod.Remove(patchedTree);
                }

                // Leaf Frequency
                patchedTree.LeafFrequency *= _settings.Value.LeafFrequencyMult;

                // Make sure we haven't gone too low if the multiplier is > 1 and if it is, remove it
                if (Math.Abs(patchedTree.LeafFrequency - tree.Record.LeafFrequency) < 0.001f)
                {
                    state.PatchMod.Remove(patchedTree);
                }

                Console.WriteLine("Patched " + patchedTree.EditorID!.ToString());
            }
        }
    }
}
